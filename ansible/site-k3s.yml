- name: Setup Mysql
  hosts: mysql
  become: yes
  become_method: sudo   
  vars:
    mysql_mount_point: /var/lib/mysql
    mysql_data_disk: /dev/vdb
    mysql_user: mysql
    mysql_group: mysql
  tasks:
    - name: Copy mount disk script
      template:
        src: ./scripts/mysql_data.sh
        dest: /tmp/mysql_data.sh
        mode: '0755'

    - name: Execute mount disk script (only if marker absent)
      ansible.builtin.command: /tmp/mysql_data.sh
      args:
        creates: /tmp/.mounted_by_mysql_data_script
      
    - name: Install MySQL
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Ensure MySQL data directory ownership
      file:
        path: "{{ mysql_mount_point }}"
        owner: "{{ mysql_user}}"
        group: "{{ mysql_group}}"
        recurse: yes

    - name: Start and enable MySQL
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Check if custom.cnf exists
      ansible.builtin.stat:
        path: /etc/mysql/mysql.conf.d/custom.cnf
      register: custom_cnf_status

    - name: Deploy custom MySQL config
      vars:
        mysql_bind_address: "0.0.0.0"
        mysql_max_connections: 500
      template:
        src: ./templates/cloudmc-my.cnf
        dest: /etc/mysql/mysql.conf.d/custom.cnf
        owner: root
        group: root
        mode: '0644'

    - name: Restart MySQL to apply config
      service:
        name: mysql
        state: restarted
      when: not custom_cnf_status.stat.exists

- name: Create Database
  hosts: mysql
  become: yes
  become_method: sudo   
  vars:
    db_user: cloudmc
    db_password: cloudmc
  tasks:
    - name: Install pip3
      apt:
        name:
          - python3
          - python3-pip
        state: present
        update_cache: yes

    - name: Install PyMySQL via apt
      apt:
        name: python3-pymysql
        state: present

    - name: Ensure database cloudmc exists
      mysql_db:
        name: "{{ item }}"
        encoding: utf8mb4
        collation: utf8mb4_0900_ai_ci
        state: present
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock        
      loop:
        - cloudmc
        - cloudmc_content
        - cloudmc_audit

    - name: Ensure database user exists
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        host: "10.0.1.%.%"
        priv: "{{ item }}.*:ALL"
        append_privs: yes
        state: present
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock        
      loop:
        - cloudmc
        - cloudmc_content
        - cloudmc_audit     


- name: Setup Elastic + Kibana
  hosts: elasticsearch
  become: yes
  become_method: sudo   
  vars:
    elastic_mount_point: /var/lib/elasticsearch
    elastic_data_disk: /dev/vdb
    elastic_user: elasticsearch
    elastic_group: elasticsearch
  tasks:
    - name: Copy mount disk script
      template:
        src: ./scripts/elastic_data.sh
        dest: /tmp/elastic_data.sh
        mode: '0755'

    - name: Execute mount disk script (only if marker absent)
      ansible.builtin.command: /tmp/elastic_data.sh
      args:
        creates: /tmp/.mounted_by_elastic_data_script

    - name: Install dependencies
      apt:
        name: apt-transport-https
        state: present
        update_cache: yes

    - name: Add Elasticsearch GPG key
      ansible.builtin.apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present

    - name: Add Elasticsearch repository
      ansible.builtin.apt_repository:
        repo: "deb https://artifacts.elastic.co/packages/8.x/apt stable main"
        state: present
        filename: elasticsearch

    - name: Install Elasticsearch
      apt:
        name: elasticsearch
        state: present
        update_cache: yes

    - name: Install Kibana
      apt:
        name: kibana
        state: present

    - name: Ensure elastic searchdirectory ownership
      file:
        path: "{{ elastic_mount_point }}"
        owner: "{{ elastic_user }}"
        group: "{{ elastic_group }}"
        recurse: yes

    - name: Start and enable Elasticsearch and Kibana
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - elasticsearch
        - kibana

- hosts: 
    - k8s_controller
    - k8s_nodes
  become: yes
  become_method: sudo   
  tasks:
    - name: Install dependencies
      apt:
        name: apt-transport-https
        state: present
        update_cache: yes

    - name: Disable swap immediately
      command: swapoff -a

    - name: Remove swap entries from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^\s*(.+\s+swap\s+.+)$'
        replace: '# \1'


- hosts: k8s_controller
  become: yes
  become_method: sudo   
  vars:
    k3s_version: v1.31.1+k3s1
    k3s_token_file: /var/lib/rancher/k3s/server/node-token
  tasks:
    - name: Install K3s controller
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for K3s token to exist
      wait_for:
        path: "{{ k3s_token_file }}"
        timeout: 60

    - name: Read K3s node token
      slurp:
        src: "{{ k3s_token_file }}"
      register: token_data

    - name: Set K3s token fact
      set_fact:
        k3s_token: "{{ token_data.content | b64decode | trim }}"
        k3s_server_url: "https://{{ ansible_host }}:6443"
      

- hosts: k8s_nodes
  become: yes
  become_method: sudo   
  vars:
    k3s_version: v1.31.1+k3s1
  tasks:
    - name: Install K3s worker
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} K3S_URL={{ hostvars[groups['k8s_controller'][0]]['k3s_server_url'] }} K3S_TOKEN={{ hostvars[groups['k8s_controller'][0]]['k3s_token'] }} sh -
      args:
        creates: /usr/local/bin/k3s-agent


- name: Verify K3s Cluster
  hosts: k8s_controller
  become: yes
  become_method: sudo   
  tasks:
    - name: Check nodes status
      shell: k3s kubectl get nodes -o wide
      register: node_status
      changed_when: false

    - name: Print nodes
      debug:
        msg: "{{ node_status.stdout_lines }}"
